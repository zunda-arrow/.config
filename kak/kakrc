map global user w ":new-window-at-current-buffer<ret>" -docstring "New Kakoune Window"

set-option global tabstop 4
set-option global scrolloff 4,2
set-option global autoreload true
set-option global idle_timeout 50

set global ui_options terminal_status_on_top=true terminal_assistant=cat
set global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}}'

evaluate-commands %sh{
    plugins="$kak_config/plugins"
        mkdir -p "$plugins"
        [ ! -e "$plugins/plug.kak" ] && \
            git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload

plug "https://gitlab.com/Screwtapello/kakoune-state-save"

plug "evanrelf/byline.kak" config %{
   require-module "byline"
}

plug "andreyorst/smarttab.kak"

plug "kakoune-surround"

hook global BufCreate .* %{
    eval %sh{printf "set-option -add buffer ui_options terminal_title=%s" $kak_bufname} 
}

hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp|gleam) %{
	smarttab
	expandtab # must be before softtabstop
}

declare-option -hidden str lsp_formatter

hook global WinSetOption filetype=(rust|python|go|c|cpp|gleam) %{
	set-option buffer indentwidth 4
	set-option global softtabstop 4 # number of spaces to delete on backspace
    smarttab
}

hook -group lsp-filetype-javascript global BufSetOption filetype=(?:javascript|typescript) %{
    set-option buffer lsp_servers %{
        [biome-lsp]
        root_globs = ["package.json"]
        command = "biome"
        args = ["lsp-proxy"]
        [typescript-lsp]
        root_globs = ["package.json"]
        command = "typescript-language-server"
        args = ["--stdio"]
        [typescript-lsp.settings._]
		preferences.includeInlayParameterNameHints = "all"
		preferences.includeInlayFunctionParameterTypeHints = true
    }
    set-option buffer lsp_formatter "biome-lsp"
}

hook global WinSetOption filetype=(javascript|typescript) %{
	set-option buffer indentwidth 0
	set-option global softtabstop 0 # number of spaces to delete on backspace
    smarttab
}

hook global WinSetOption filetype=(yml) %{
	set-option buffer indentwidth 2
	set-option global softtabstop 2 # number of spaces to delete on backspace
    smarttab
}

# hook global RawKey .* %sh{
#     printf "set buffer ui_options terminal_status_on_top=true terminal_assistant=cat terminal_title=%s" $kak_bufname
# }

map global normal <c-/> ":comment-line<ret>"
map global normal a "<a-:>li" -docstring "Enter insert mode after the cursor"

map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
map global user y '<a-|>wl-copy<ret>' -docstring 'Yank to clipboard'

map global user b ':popup-terminal kak -c %val{session} -e lsp-hover-buffer<ret>' -docstring 'Open LSP Hover Buffer in New Window'

map global user a ':lsp-code-actions<ret>' -docstring 'LSP Action'
map global user i ':lsp-formatting %opt{lsp_formatter}<ret>' -docstring 'Format Code'
map global user <ret> ':popup-terminal<ret>' -docstring 'Open Popup Window'

map global user r ':lsp-rename-prompt<ret>' -docstring 'LSP Rename'

map global user m ':select-surround<ret>' -docstring 'Select surrounding tag'

map global view v 'v12vj' -docstring 'center cursor (vertically + 12)'
map global view c 'v12vj' -docstring 'center cursor (vertically + 12)'


define-command keebify %{
    map global normal m "h"
    map global normal n "j"
    map global normal e "k"
    map global normal i "l"

    map global normal M "H"
    map global normal N "J"
    map global normal E "K"
    map global normal I "L"

    map global normal u "i"
    map global normal l "u"
    map global normal U "I"
    map global normal L "U"
}


hook global KakBegin .* %{
    add-highlighter global/ number-lines -relative
    add-highlighter global/ show-matching
    add-highlighter global/ wrap

    eval %sh{ kak-tree-sitter -dks --with-highlighting --init $kak_session }

    eval %sh{kak-lsp}
    lsp-enable

    add-highlighter global/ show-whitespaces -indent "â”‚" -tabpad " " -tab "â”‚" -spc " " -nbsp "" -lf ""

    colorscheme 1337

    # define-command popup-terminal -params 0.. 'nop %sh{(footclient --app-id kakoune-popup $@) < /dev/null > /dev/null 2>&1 &}'
    # define-command -override terminal -params 0.. 'nop %sh{(footclient "$@") < /dev/null > /dev/null 2>&1 &}'
    # define-command popup-terminal-sync -params 0.. 'eval %sh{footclient --app-id kakoune-popup $@}'

    define-command popup-terminal -params 0.. 'nop %sh{(footclient start --class dropdown-terminal $@) < /dev/null > /dev/null 2>&1 &}'
    define-command -override terminal -params 0.. 'nop %sh{(tmux neww -- "$@") < /dev/null > /dev/null 2>&1 &}'
    define-command popup-terminal-sync -params 0.. 'eval %sh{footclient -a dropdown-terminal "$@"}'

    define-command config-reload 'source ~/.config/kak/kakrc'
    define-command new-window-at-current-buffer %{ eval %sh{
        printf "terminal kak -c %s %s -e 'select %s'" $kak_session $kak_buffile $kak_selection_desc
    }}

    declare-option bool show_inline_hint false
    declare-option bool show_lsp_error false

    define-command -hidden -override lsp-handle-progress -params 6 -docstring %{
      lsp-handle-progress <token> <title> <cancelable> <message> <percentage> <done>
      Handle progress messages sent from the language server. Override to handle this.
    } %{
        set-option global lsp_modeline_progress %sh{
            if ! "$6"; then
                echo "ðŸ¤”"
            fi
        }
    }


    define-command -hidden -override lsp-show-code-actions -params 1.. -docstring "Called when code actions are available for the main cursor position" %{
        set-option buffer lsp_modeline_code_actions "ðŸ¤¯"
    }

    define-command -override lsp-show-hover -params 4 -docstring %{
        lsp-show-hover <anchor> <info> <diagnostics> <code_lenses>
        Render hover info.
    } %{ evaluate-commands %sh{
        lsp_info=$2
        lsp_diagnostics=$3
        lsp_code_lenses=$4

			if [ -n "$lsp_info" ]; then
                lsp_info="${lsp_info#"${lsp_info%%[![:space:]]*}"}"
        		lsp_info=$(echo "$lsp_info" | fold -w 100 -s)
        		lsp_info=$(python -c "import sys; print('', '\n'.join(map(lambda x: f' {x} ', sys.argv[1].splitlines())), ' ', sep='\n')" "$lsp_info")
    		fi

			if [ -n "$lsp_diagnostics" ]; then
                lsp_diagnostics="${lsp_diagnostics#"${lsp_diagnostics%%[![:space:]]*}"}"
        		lsp_diagnostics=$(echo "$lsp_diagnostics" | fold -w 100 -s)
				lsp_diagnostics=$(python -c "import sys; print('\n'.join(sys.argv[1].splitlines()[:40]))" "$lsp_diagnostics")
    		fi

		    lsp_info=$(printf %s "$lsp_info" | sed s/\'/\'\'/g)
		    lsp_diagnostics=$(printf %s "$lsp_diagnostics" | sed s/\'/\'\'/g)

    		if [ "$kak_opt_show_inline_hint" = "true" ]; then
        		if [ -n "$lsp-info" ]; then
                printf "info -markup -anchor %s.%s -- '%s';" "$kak_cursor_line" "$kak_cursor_column" "$lsp_info"
            fi
        fi

    		if [ "$kak_opt_show_lsp_error" = "true" ]; then
        		if [ -n "$lsp_diagnostics" ]; then 
                printf "info -markup -- '%s';" "$lsp_diagnostics"
        		fi
        fi

        printf 'set-option window show_inline_hint false;'
        printf 'set-option window show_lsp_error false;'
    }}

    define-command -override tree-sitter-user-after-highlighter %{
      add-highlighter -override buffer/show-matching show-matching
    }

    define-command file-picker %{
        eval %sh{
            tempfile=$(mktemp) 
            echo "popup-terminal-sync ranger . --choosefiles=$tempfile" 
            echo "eval %sh{
                text=\$(cat $tempfile)
                if [ -n \"\$text\" ]; then
                    printf 'edit %s' \$text
                fi
            }"
        }
    }

    define-command fzf %{
        eval %sh{
            tempfile=$(mktemp) 
            echo "popup-terminal-sync sh -c \"git ls-files | fzf --preview='bat {}' > $tempfile\""
            echo "eval %sh{
                text=\$(cat $tempfile)
                if [ -n \"\$text\" ]; then
                    printf 'edit %s' \$text
                fi
            }"
        }
    }

    define-command todos %sh{
        tempfile=$(mktemp)
        git grep --line-number --column "TODO:" >> $tempfile &
        git grep --line-number --column "@todo" >> $tempfile &
        printf "edit -fifo %s *todos*\n" $tempfile
        printf "set-option buffer filetype grep\n"
    }
}


define-command -override fzf-buffer %sh{

}

map global user k ':eval %{set-option window show_inline_hint true; lsp-hover}<ret>' -docstring 'LSP Show'
map global user e ':eval %{set-option window show_lsp_error true; lsp-hover}<ret>' -docstring 'LSP Show'

# plug "andreyorst/fzf.kak" config %{
#     map global user <s> ':fzf-mode<ret>'
# } demand fzf %{
#     set-option global fzf_terminal_command 'popup-terminal-sync kak -c %val{session} -e "%arg{@}"'
#     set-option global fzf_implementation 'fzf --layout reverse --bind ctrl-d:page-down,ctrl-u:page-up'
#     set-option global fzf_highlight_command 'bat'
#     set-option global fzf_use_main_selection 'false'
# }

map global user f ':fzf<ret>' -docstring 'Fuzzy Find'
map global user F ':file-picker<ret>' -docstring 'Search for files in file browser'
map global user p '<a-!>wl-paste<ret>' -docstring 'Paste from system clipboard after selection'
map global user P '<!>wl-paste<ret>' -docstring 'Paste from system clipboard before selection'
map global user t ':enter-user-mode tree-sitter<ret>' -docstring 'Tree-sitter mode'
map global normal "<s-space>" ':enter-user-mode tree-sitter<ret>' -docstring 'Tree-sitter mode'
